import re
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from handlers.start import UserData
from utils.program_picker import get_program

router = Router()

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    return ''.join(['\\' + char if char in escape_chars else char for char in text])

@router.message(UserData.level)
async def process_level(message: Message, state: FSMContext):
    level = message.text.lower()

    if level not in ["–Ω–∞—á–∏–Ω–∞—é—â–∏–π", "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    level_group = "beginner" if level == "–Ω–∞—á–∏–Ω–∞—é—â–∏–π" else "advanced"
    user_data = await state.get_data()

    program = get_program(
        gender=user_data["gender"],
        age_group=user_data["age_group"],
        level=level_group
    )

    if not program:
        await message.answer("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
        return

    await state.update_data(program=program)

    title = escape_markdown(program.get("title", "–ü—Ä–æ–≥—Ä–∞–º–º–∞"))
    description = escape_markdown(program.get("description", ""))
    duration = escape_markdown(str(program.get("duration_weeks", "")))

    response = f"üèãÔ∏è *{title}*\n"
    response += f"üìù {description}\n"
    response += f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –Ω–µ–¥–µ–ª—å\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    for section_content in program.get("sections", {}).values():
        response += f"{escape_markdown(section_content)}\n\n"

    await message.answer(response, parse_mode="MarkdownV2")
    await state.set_state(UserData.program)
